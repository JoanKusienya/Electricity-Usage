# -*- coding: utf-8 -*-
"""Electricity.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gZt9ZaC4yYdiUy8XctRBLFd4abFALfvB

## Load the data
"""

import pandas as pd
url= "https://raw.githubusercontent.com/JoanKusienya/Electricity-Usage/main/Electricity.xlsx"

df= pd.read_excel(url)
df.head()

"""### Adjust headers and columns to be used"""

df = pd.read_excel(url, sheet_name='Raw Data', header=(2))
df = df.iloc[:, :4]
df.head()

"""### Determine data types and statistical summary of numerical columns in our data set"""

print(df.dtypes)
#Statistical summary for numrical columns
numerical_cols = df.select_dtypes(include=['float64'])
print(numerical_cols.describe())

"""**Data Cleaning**"""

# Missing data
null= df.isnull().sum()
print('missing data', null)

"""Average solar and electricity use per hour

#### (i)	Carry out checks on the data provided to confirm that the data is complete and fit for use. This should include:

•	creating a graph showing the average solar electricity generation and average electricity usage for each hour in a day, i.e. the average over all amounts for 1 am, and each subsequent hour within a 24-hour period.

•	investigating any significant outliers.

•	making any corrections that are needed.
"""

import matplotlib.pyplot as plt
import seaborn as sns

# Calculate hourly averages
hourly_avg = df.groupby('Hour').agg({
    'Solar electricity generation (kWh)': 'mean',
    'Electricity usage (kWh)': 'mean'
}).reset_index()

# Create the plot
plt.figure(figsize=(12, 6))
plt.plot(hourly_avg['Hour'], hourly_avg['Solar electricity generation (kWh)'],
         label='Avg Solar Generation', marker='o')
plt.plot(hourly_avg['Hour'], hourly_avg['Electricity usage (kWh)'],
         label='Avg Electricity Usage', marker='o')

plt.xlabel('Hour of Day')
plt.ylabel('Average Electricity (kWh)')
plt.title('Average Solar Generation vs Electricity Usage by Hour')
plt.legend()
plt.grid(True)
plt.xticks(range(0, 24))
plt.show()

"""##### Check for significant outliers"""

# Check for outliers using z-score method
import numpy as np
from scipy import stats

# Calculate z-scores for both metrics
z_scores_solar = np.abs(stats.zscore(df['Solar electricity generation (kWh)']))
z_scores_usage = np.abs(stats.zscore(df['Electricity usage (kWh)']))

# Find outliers (z-score > 3)
outliers_solar = df[z_scores_solar > 3]
outliers_usage = df[z_scores_usage > 3]

print("Solar Generation Outliers:")
print(outliers_solar.sort_values('Solar electricity generation (kWh)', ascending=False).head())

print("\
Electricity Usage Outliers:")
print(outliers_usage.sort_values('Electricity usage (kWh)', ascending=False).head())

# Create box plots to visualize the distribution and outliers
plt.figure(figsize=(12, 5))

plt.subplot(1, 2, 1)
plt.boxplot(df['Solar electricity generation (kWh)'])
plt.title('Solar Generation Distribution')
plt.ylabel('kWh')

plt.subplot(1, 2, 2)
plt.boxplot(df['Electricity usage (kWh)'])
plt.title('Electricity Usage Distribution')
plt.ylabel('kWh')

plt.tight_layout()
plt.show()

"""##### Make corrections to our data"""

import matplotlib.pyplot as plt

# Remove outliers using IQR method
def remove_outliers(df, column):
    Q1 = df[column].quantile(0.25)
    Q3 = df[column].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    return df[(df[column] >= lower_bound) & (df[column] <= upper_bound)]

# Clean both columns
df_no_outliers = df.copy()
df_no_outliers = remove_outliers(df_no_outliers, 'Solar electricity generation (kWh)')
df_no_outliers = remove_outliers(df_no_outliers, 'Electricity usage (kWh)')

# Calculate hourly averages
hourly_avg_clean =df_no_outliers.groupby('Hour').agg({
    'Solar electricity generation (kWh)': 'mean',
    'Electricity usage (kWh)': 'mean'
}).reset_index()

# Create the updated plot
plt.figure(figsize=(12, 6))
plt.plot(hourly_avg_clean['Hour'], hourly_avg_clean['Solar electricity generation (kWh)'],
         label='Avg Solar Generation', marker='o')
plt.plot(hourly_avg_clean['Hour'], hourly_avg_clean['Electricity usage (kWh)'],
         label='Avg Electricity Usage', marker='o')

plt.xlabel('Hour of Day')
plt.ylabel('Average Electricity (kWh)')
plt.title('Average Solar Generation vs Electricity Usage by Hour (Outliers Removed)')
plt.legend()
plt.grid(True)
plt.xticks(range(0, 24))
plt.show()

print("\
Original data:", len(df))
print("Data after removing outliers:", len(df_no_outliers))
print("\
Updated hourly averages:")
print(hourly_avg_clean)

"""### (ii)	Calculate, for each hour in 2020, the amount of electricity that needed to be bought from the electricity provider (measured in kWh and subject to a minimum of zero).

"""

# Calculate the electricity needed to be bought from the provider
df_no_outliers['Electricity bought (kWh)'] = df_no_outliers.apply(
    lambda row: max(0, row['Electricity usage (kWh)'] - row['Solar electricity generation (kWh)']), axis=1
)

# Display the first few rows of the updated dataframe
print(df_no_outliers[['Hour', 'Date/hour start', 'Electricity bought (kWh)']].head())

"""
### (iii)	Calculate, for each hour in 2020, the excess solar electricity generated over electricity used (measured in kWh and subject to a minimum of zero).
"""

# Excess solar electricity
df_no_outliers['Excess solar (kWh)'] = df_no_outliers.apply(
    lambda row: max(0, float(row['Solar electricity generation (kWh)']) - float(row['Electricity usage (kWh)'])),
    axis=1
)


print("Excess solar calculations for 2020:")
print(df_no_outliers[['Hour', 'Date/hour start','Solar electricity generation (kWh)','Electricity usage (kWh)','Electricity bought (kWh)', 'Excess solar (kWh)']])

# Calculate total excess solar in 2020
total_excess = df_no_outliers['Excess solar (kWh)'].sum()
print(f"\
Total excess solar electricity in 2020: {total_excess:.2f} kWh")

"""### (iii) Model the cumulative battery charge level (measured in kWh) for each hour over 2020, assuming a battery had already been installed.

The battery charge level should:

•	begin at zero at 1 January 2020 00:00.
•	allow for the increase or decrease in charge level depending on the hourly results of parts (ii) and (iii).
•	be subject to the cap on the maximum battery charge level.

"""

# Ensure the data typ for numerical columns is float
battery_capacity = 12.5
battery_charge = 0.0

# Convert relevant columns to float
df_no_outliers['Excess solar (kWh)'] = df_no_outliers['Excess solar (kWh)'].astype(float)
df_no_outliers['Electricity bought (kWh)'] = df_no_outliers['Electricity bought (kWh)'].astype(float)
df_no_outliers['Battery charge (kWh)'] = 0.0

# calculate the battery charge level
for index, row in df_no_outliers.iterrows():
    battery_charge += row['Excess solar (kWh)'] - row['Electricity bought (kWh)']
    battery_charge = max(0.0, min(battery_charge, battery_capacity))
    df_no_outliers.at[index, 'Battery charge (kWh)'] = battery_charge

# Plot updated results
import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(12, 6))
sns.lineplot(data=df_no_outliers, x='Date/hour start', y='Battery charge (kWh)')
plt.title('Battery Charge Level Throughout 2020')
plt.xlabel('Date')
plt.ylabel('Battery Charge (kWh)')
plt.axhline(y=12.5, color='r', linestyle='--', label='Maximum Capacity')
plt.legend()
plt.show()

print(f"Average battery charge: {df_no_outliers['Battery charge (kWh)'].mean():.2f} kWh")
print(f"Maximum battery charge reached: {df_no_outliers['Battery charge (kWh)'].max():.2f} kWh")

"""### (iv) Calculate the amount of electricity for each hour in 2020 that would have been bought from the electricity provider (measured in kWh and subject to a minimum of zero), assuming a battery had already been installed."""

# Electricity bought with battery installed
df_no_outliers['Electricity bought with battery (kWh)'] = 0.0
battery_charge = 0.0

for index, row in df_no_outliers.iterrows():
    # Calculate required electricity
    required = float(row['Electricity usage (kWh)'])
    solar_gen = float(row['Solar electricity generation (kWh)'])

    # Use solar first
    needed_after_solar = max(0, required - solar_gen)

    # Use battery if available
    used_from_battery = min(battery_charge, needed_after_solar)
    needed_after_battery = needed_after_solar - used_from_battery

    # Update battery charge
    battery_charge -= used_from_battery
    excess_solar = max(0, solar_gen - required)
    battery_charge = min(battery_capacity, battery_charge + excess_solar)

    # Electricity that needs to be bought
    df_no_outliers.at[index, 'Electricity bought with battery (kWh)'] = needed_after_battery


print("Electricity bought with battery installed:")
print(df_no_outliers[['Date/hour start', 'Electricity bought with battery (kWh)']].head())

total_bought_with_battery = df_no_outliers['Electricity bought with battery (kWh)'].sum()
total_bought_without_battery = df_no_outliers['Electricity bought (kWh)'].sum()

print(f"\
Total electricity bought in 2020 with battery: {total_bought_with_battery:.2f} kWh")
print(f"Total electricity bought in 2020 without battery: {total_bought_without_battery:.2f} kWh")
print(f"Reduction in electricity bought: {total_bought_without_battery - total_bought_with_battery:.2f} kWh")

"""### (V) Calculate the savings over 2020 (in dollars ($), using 1 January 2022 electricity prices and ignoring discounting) from installing a battery compared to using the existing solar panels alone."""

# price of $0.15 per kWh for this calculation as provided in the background information

electricity_price_per_kwh = 0.15

# Total cost with and without battery
total_cost_with_battery = df_no_outliers['Electricity bought with battery (kWh)'].sum() * electricity_price_per_kwh
total_cost_without_battery = df_no_outliers['Electricity bought (kWh)'].sum() * electricity_price_per_kwh

# Savings
savings = total_cost_without_battery - total_cost_with_battery

print(f"Total cost with battery: ${total_cost_with_battery:.2f}")
print(f"Total cost without battery: ${total_cost_without_battery:.2f}")
print(f"Savings from installing battery: ${savings:.2f}")

"""### (vi) Tabulate the data appropriately and then produce a chart to illustrate, on a monthly basis for the calendar year and measured in kWh, the:

•	monthly solar generation.

•	monthly electricity usage.

•	monthly electricity purchased from the electricity provider (no battery).

•	monthly electricity purchased from the electricity provider (with battery).

"""

# Create monthly aggregations
monthly_data = df_no_outliers.groupby(df_no_outliers['Date/hour start'].dt.strftime('%Y-%m')).agg({
    'Solar electricity generation (kWh)': 'sum',
    'Electricity usage (kWh)': 'sum',
    'Electricity bought (kWh)': 'sum',
    'Electricity bought with battery (kWh)': 'sum'
}).reset_index()

# Rename columns
monthly_data.columns = ['Month', 'Solar Generation', 'Usage', 'Bought (No Battery)', 'Bought (With Battery)']

# Display the tabulated data
print("Monthly Electricity Data (kWh):")
print(monthly_data)

# Create visualization
import matplotlib.pyplot as plt

plt.figure(figsize=(15, 8))
plt.plot(range(12), monthly_data['Solar Generation'], marker='o', label='Solar Generation')
plt.plot(range(12), monthly_data['Usage'], marker='s', label='Usage')
plt.plot(range(12), monthly_data['Bought (No Battery)'], marker='^', label='Bought (No Battery)')
plt.plot(range(12), monthly_data['Bought (With Battery)'], marker='*', label='Bought (With Battery)')

plt.xticks(range(12), [m[5:7] for m in monthly_data['Month']], rotation=0)
plt.xlabel('Month')
plt.ylabel('Electricity (kWh)')
plt.title('Monthly Electricity Patterns in 2020')
plt.legend()
plt.grid(True)
plt.show()